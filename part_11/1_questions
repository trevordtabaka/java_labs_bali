1) Turn the following into a Generic interface:

   public interface Consumer<T> {
       public void consume(T parameter)
   }

2) What are a few advantages of using Generic types?
Can make a method working for many input parameter types,

3) What is Type Erasure?
Where at runtime the jvm replaces generic types with the type the program is going to use.

4) Assuming the following snippet:

    public static <T> T returnType(T argument) {
        return argument;
    }

    Does this work? yes
    Integer i = returnType(1);
    String s = returnType("String");

5) What is a Bounded Type Parameter?
Where the type has to be within the bounds of the bounding type

6) Demonstrate the use of Generic Wildcard in a method signature:



7) What are bounded and unbounded wildcards in Generics?

8) What is difference between List<? extends T>  and  List <? super T> ?
The parameter needs to be a subclass of T in the first example and needs to be a super class of T in the second.